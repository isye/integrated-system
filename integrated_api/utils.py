import json, datetime,re

def getJSONBody(requestBody):
    try:
        print('requestBody', requestBody)
        if (requestBody is not None and len(str(requestBody)) > 0):
            requestBody = json.loads(requestBody)
        else:
            requestBody = json.loads("{}")
        return requestBody
    except Exception as e:
        print("Error in function getJSONBody" + e)

def removeDictItem(objdict, objKey):
    try:
        copyObj = objdict
        del copyObj[objKey]
        return copyObj
    except Exception as e:
        print("Error in function removeDictItem" + e)

def customError(functionname, e):
    print('Error in function ', functionname, '. Type error:', e)
    me = str(e)
    if (me.find("can only be updated to DEFAULT")>-1):
        print(me)
        return "Status: error because update autogenerated column, for example id column"
    elif (me.find("no attribute 'keys'") > -1):
        print(me)
        return "Status: error because of input data is not correct"
    elif (me.find("Unconsumed column names") > -1):
        print(me)
        return "Error because of unrecognized column. Check key in your json data."
    elif (me.find("JSONDecodeError") > -1):
        print(me)
        return "Status: error because of JSON format is incorrect"
    else:
        print(me)
        return "Status: other error happen, contact developer"

def formatCalendarDetails(data):
    try:
        print(type(data), data)
        summary = data.get('event_name', 'An Event')
        description = data.get('event_code', '')
        start = data.get('event_start',None)
        duration = data.get('duration_minutes', None)
        print('summary',summary, 'description', description, 'start', start, 'duration', duration)
        if(start is not None and duration is not None):
            start = str(start)
            p = re.compile(r'\d{2}:\d{2}:\d{2}')
            print('p', p, p.search(str(start)))
            if (p.search(start)):
                start = start[0:start.rfind(":", 0, len(start))]
            start = datetime.datetime.strptime(start, '%Y-%m-%d %I:%M')
            end = start + datetime.timedelta(minutes=int(duration))
            #end = end.strftime('%Y-%m-%d %I:%M')
            timezone = 'EST'
            eventData = {
                'summary': summary,
                'description': description,
                'start': {
                    'dateTime': start.isoformat(),
                    'timeZone': timezone,
                },
                'end': {
                    'dateTime': end.isoformat(),
                    'timeZone': timezone,
                },
                'attendees': [
                    {'email': 'isye.arieshanti@gmail.com'},
                    {'email': 'dev.intempio@gmail.com'},
                    {'email': 'jon@go2impact.com'},
                    {'email': 'marra@go2impact.com'}
                ],
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'email', 'minutes': 24 * 60},
                        {'method': 'popup', 'minutes': 10},
                    ],
                },
                'sendUpdates': True,
                'sendNotifications' : True
            }
            print('eventData',eventData)
            return eventData
        else:
            return None
    except Exception as e:
        errormessage = customError("formatCalendarDetails", e)
        print(errormessage)
        raise

if __name__=='__main__':
    start = '2018-11-29 08:00'
    eventDate = datetime.datetime.strptime(start, '%Y-%m-%d %I:%M')
    print(eventDate.isoformat())
